@model IT_Hardware.Areas.Admin.Models.Mod_Budget_Uses


@{
    ViewBag.Title = "Index";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}


<link rel="stylesheet" href="http://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
@*<script src="https://code.jquery.com/jquery-1.12.4.js"></script>*@
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>


<script type="text/javascript">
    var isShift = false;
    var seperator = "/";
    window.onload = function () {
        //Reference the Table.
        var tblForm = document.getElementById("tblForm");

        //Reference all INPUT elements in the Table.
        var inputs = document.getElementsByTagName("input");

        //Loop through all INPUT elements.
        for (var i = 0; i < inputs.length; i++) {
            //Check whether the INPUT element is TextBox.
            if (inputs[i].type == "text") {
                //Check whether Date Format Validation is required.
                if (inputs[i].className.indexOf("date-format") > 0) {

                    //Set Max Length.
                    inputs[i].setAttribute("maxlength", 10);

                    //Only allow Numeric Keys.
                    inputs[i].onkeydown = function (e) {
                        return IsNumeric(this, e.keyCode);
                    };

                    //Validate Date as User types.
                    inputs[i].onkeyup = function (e) {
                        ValidateDateFormat(this, e.keyCode);
                    };
                }
            }
        }
    };

    function IsNumeric(input, keyCode) {
        if (keyCode == 16) {
            isShift = true;
        }
        //Allow only Numeric Keys.
        if (((keyCode >= 48 && keyCode <= 57) || keyCode == 8 || keyCode <= 37 || keyCode <= 39 || (keyCode >= 96 && keyCode <= 105)) && isShift == false) {
            if ((input.value.length == 2 || input.value.length == 5) && keyCode != 8) {
                input.value += seperator;
            }

            return true;
        }
        else {
            return false;
        }
    };

    function ValidateDateFormat(input, keyCode) {
        var dateString = input.value;
        if (keyCode == 16) {
            isShift = false;
        }
        var regex = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;

        //Check whether valid dd/MM/yyyy Date Format.
        if (regex.test(dateString) || dateString.length == 0) {
            ShowHideError(input, "none");
        } else {
            ShowHideError(input, "block");
        }
    };

    function ShowHideError(textbox, display) {
        var row = textbox.parentNode.parentNode;
        var errorMsg = row.getElementsByTagName("span")[0];
        if (errorMsg != null) {
            errorMsg.style.display = display;
        }
    };
</script>





<script>
    $(function () {
        $(".dateclass").datepicker({
            changeYear: true,
            changeMonth: true,
            dateFormat: 'dd/mm/yy',
            minDate: new Date('01/01/1900'),
            maxDate: '+10Y'
        });
    });
</script>

<style type="text/css">

    .form-rounded {
        border-radius: 3rem;
    }
</style>

<style type="text/css">

    @@import "compass/css3";

    input[type=text], textarea {
        @@include transition(all 0.30s ease-in-out);
        outline: none;
        padding: 3px 0px 3px 3px;
        margin: 5px 1px 3px 0px;
        border: 1px solid #DDDDDD;
    }

        input[type=text]:focus, textarea:focus {
            @@include box-shadow(0 0 5px rgba(81, 203, 238, 1));
            padding: 3px 0px 3px 3px;
            margin: 5px 1px 3px 0px;
            border: 1px solid rgba(81, 203, 238, 1);
        }
</style>

<style type="text/css">
    .button_cls {
        background: #1AAB8A;
        color: #fff;
        border: none;
        position: relative;
        height: 25px;
        font-size: 1em;
        padding: 0 2em;
        cursor: pointer;
        transition: 800ms ease all;
        outline: none;
    }

        .button_cls:hover {
            background: #fff;
            color: #1AAB8A;
        }

        .button_cls:before, button:after {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            height: 2px;
            width: 0;
            background: #1AAB8A;
            transition: 400ms ease all;
        }

        .button_cls:after {
            right: inherit;
            top: inherit;
            left: 0;
            bottom: 0;
        }

        .button_cls:hover:before, button:hover:after {
            width: 100%;
            transition: 800ms ease all;
        }
</style>


<div style=" margin-top: -50px;  text-align: center; height: 50px; align-content: center; width: 100% " class="card w-100 shadow p-3 mb-5 bg-white rounded">

    <p style="font-size:large; padding-top:-5px; font-weight:400;">Edit Budget Uses</p>

</div>

<div style=" align-content:center; width:100%" class="card w-100 shadow p-3 mb-5 bg-white rounded">


    @using (Html.BeginForm("Update_Budget_Uses", "Budget_Uses", FormMethod.Post))
    {



        <table class=" table-hover table-striped shadow " style="width:100%">


            <tr>
                <td style="width:25%; ">
                    Budget Year
                </td>
                <td style="width:25%;">

                    @Html.DropDownListFor(x => x.Budget_Year, Model.Budget_Year_List, new { @class = " form-rounded", @disabled = "true", @style = " width :90%; " })

                </td>

                <td style="width:25%; height:50px;">
                    Budget Uses for
                </td>
                <td style="width:25%;">

                    @Html.DropDownListFor(x => x.Budget_Type,
                    new List<SelectListItem>()
                      {
                        new SelectListItem() { Text= "Budget Only", Value = "Budget" },
                        new SelectListItem() { Text= "Payment Processing", Value = "Payment"},
                      }
                    , "Please select a Type", new { @class = " form-rounded", @style = " width :96%; " })

                </td>
            </tr>


            <tr>
                <td style="width:25%; height:50px;">
                    Budget Head Name
                    @Html.HiddenFor(x => x.Budget_Uses_Id, new { @class = " form-rounded", @style = " width :90%; " })
                    @Html.HiddenFor(x => x.Budget_Head_Id, new { @class = " form-rounded", @style = " width :90%; " })
                </td>
                <td style="width:75%;" colspan="3">
                    @Html.DropDownListFor(x => x.Budget_Head_Id, Model.Budget_List,
                   new { @class = " form-rounded", @disabled = "true", @style = " width :90%; background-color: #e4f0f0;" })


                </td>

            </tr>

            <tr>
                <td style="width:25%;">
                    Utilization Details
                </td>
                <td style="width:75%; " colspan="3">
                    @Html.TextAreaFor(x => x.Utilization_Details, new { @rows = "4", @style = " width :96%; " })
                </td>
            </tr>


            <tr>

                <td style="width:25%;">
                    Total Approved Budget
                </td>
                <td style="width:25%;">
                    @Html.TextBoxFor(x => x.Total_Approved_Budget, new { @class = " form-rounded", @readonly = "true", @style = " width :90%; background-color: #e4f0f0;" })
                </td>

                <td style="width:25%; height:50px;">
                    Processing Date
                </td>
                <td style="width:25%;">

                    @Html.TextBoxFor(x => x.Processing_Date, new { @class = "dateclass form-rounded date-format", @style = " width :90%; " })
                </td>
            </tr>


            <tr>
                <td style="width:25%; height:50px;">
                    Amount Utilized
                </td>
                <td style="width:25%;">

                    @Html.TextBoxFor(x => x.Amount_Utilized_Before, new { @class = " form-rounded", @readonly = "true", @style = " width :90%; background-color: #e4f0f0;" })
                </td>
                <td style="width:25%; height:50px;">
                    Total Available Budget
                </td>
                <td style="width:25%;">

                    @Html.TextBoxFor(x => x.Balance_Available, new { @class = " form-rounded", @readonly = "true", @style = " width :90%; background-color: #e4f0f0;" })
                </td>

            </tr>

            <tr>
                <td style="width:25%; height:50px;">
                    Budget for the Proposal
                </td>
                <td style="width:25%;">

                    @Html.TextBoxFor(x => x.Budget_Amount, new { @class = " form-rounded", @style = " width :90%; " })
                </td>
                <td style="width:25%; height:50px;">
                    Remaning Total Budget
                </td>
                <td style="width:25%;">

                    @Html.TextBoxFor(x => x.Remaning_Balance, new { @class = " form-rounded", @readonly = "true", @style = " width :90%; background-color: #e4f0f0;" })
                </td>

            </tr>


            <tr>
                <td style="width:25%;">
                    Remarks
                </td>
                <td style="width:75%; " colspan="3">
                    @Html.TextAreaFor(x => x.Remarks, new { @class = " form-rounded", @style = " width :96%; " })
                </td>
            </tr>

            <tr>
                <td style="width:100%; height:10px;" colspan="4">
                </td>
            </tr>
            <tr style=" height: 50px; ">
                <td align="left" style="width:25%; "></td>

                <td style="width: 25%; padding-top: 10px; padding-bottom: 5px" align="center">
                    <button class="button_cls form-rounded">Submit</button>

                </td>

                <td style="width: 25%; padding-top: 10px; padding-bottom: 5px" align="center">
                    @Html.ActionLink("Back", "Budget_Uses_Details", "Budget_Uses", null, new { @class = "button_cls form-rounded", })
                </td>

                <td align="left" style="width:25%;"></td>
            </tr>
        </table>


    }
</div>


@if (TempData["Message"] != null && TempData["Message"] != "" && TempData["Message"] != string.Empty)
{
    <script type="text/javascript">

    window.onload = function () {
        /**/
        alert("@TempData["Message"]");
    /**/
    };
    </script>

}

<script type="text/javascript">
    $(function () {

        $('#Budget_Year').change(function () {
            $('#Budget_Head_Id').empty();

            $.ajax({
                type: "POST",
                url: "/Admin/Budget_Uses/Budget_List",
                datatype: "Json",
                data: { Yearcode: $('#Budget_Year').val() },
                success: function (data) {
                    $.each(data, function (index, value) {
                        $('#Budget_Head_Id').append('<option value="' + value.Value + '">' + value.Text + '</option>');
                    });
                }

            });

        });
    });


    $(function () {

        $('#Budget_Head_Id').change(function () {

            $.ajax({
                type: "POST",
                url: "/Admin/Budget_Uses/Prev_Budget_info",
                dataType: "json",
                data: { Yearcode: $('#Budget_Year').val(), Bud_Head_Id: $('#Budget_Head_Id').val() },
                success: function (response) {
                    if (response != null) {
                        $('#Total_Approved_Budget').val(response.Total_Approved_Budget);
                        $('#Amount_Utilized_Before').val(response.Amount_Utilized_Before);
                        $('#Balance_Available').val(response.Balance_Available);
                    } else {
                        alert("Something went wrong");
                    }
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });

        });
    });


    $(function () {
        $('#Budget_Amount').focusout(function () {
            $('#Remaning_Balance').val($('#Balance_Available').val() - $('#Budget_Amount').val());
        });
    });

</script>





